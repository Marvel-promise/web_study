myBatis核心文件配置：
    configuration配置
        properties属性
        将配置信息单独抽取成properties文件，该标签加载额外的properties文件
        <!--    通过properties标签加载外部的properties文件  -->
            <properties resource="jdbc.properties"/>
            <environments default="developement">
                <environment id="developement">
                    <transactionManager type="JDBC"></transactionManager>
                    <dataSource type="POOLED">
                        <property name="driver" value="${jdbc.driverClassName}"/>
                        <property name="url" value="${jdbc.url}"/>
                        <property name="username" value="${jdbc.user}"/>
                        <property name="password" value="${jdbc.password}"/>
                    </dataSource>
                </environmen
        settings设置
        typeAliases类型别名 注意：有顺序
        <!--    定义别名-->
            <typeAliases>
                <typeAlias type="com.Wang.domain.User" alias="user"/>
            </typeAliases>
        将java类设置成一个简短的名字
        typeHandlers类型处理器
        ObjectFactory对象工厂
        plugins插件
        environments环境
        1. environments标签
        其中,務管理器(transactionManager) 类型有两种:
        ●JDBC: 这个配置就是直接使用了JDBC的提交和回滚设置,它依赖于从数据源得到的连接来管理事务作用域。
        ●MANAGED: 这个配置几乎没做什么。它从来不提交或回滚一个连接, 而是让容器来管理事务的整个生命周期(比如JEE 应用服务器的上下文)。默认情况下它会关闭连接，然而- -些容器并不希望这样，因此需要将closeConnection属性设置为false来阻止它默认的关闭行为。
        其中，数据源(dataSource)类型有三种:
         ●UNPOOLED:这个数据源的实现只是每次被请求时打开和关闭连接。
        ●POOLED:这种数据源的实现利用“池”的概念将JDBC连接对象组织起来。
        ●JNDI: 这个数据源的实现是为了能在如EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源,然后放置-个JNDI上下文的引用。
            环境变量
                transactionManager事务管理器
                dataSource数据源
        databaseIdProvider数据库厂商标识
        mappers 映射器
        2. mapper标签
        该标签的作用是加载映射的，加载方式有如下几种:
        ●使用相对于类路径的资源引用，例如: <mapper resource= "org/mybatis/builder/AuthorMapper.xml"/>
        ●使用完全限定资源定位符(URL) , 例如: <mapper url=" file://var/mappers/AuthorMapper.xml"/>
        ●使用映射器接口实现类的完全限定名，例如: <mapper class= "org.mybatis. builder.AuthorMapper"/>
        ●将包内的映射器接口实现全部注册为映射器，例如: <package name= "org.mybatis.builder"/>
        mybatis的dao层实现方式：手写Dao，代理方式
         1.代理开发方式介绍
         采用Mybatis的代理开发方式实现DAO层的开发,这种方式是我们后面进入企业的主流。
         Mapper接口开发方法只需要程序员编写Mapper接口(相当于Dao接口)， 由Mybatis 框架根据接口定义创建接
         口的动态代理对象，代理对象的方法体同边Dao接[实现类方法。
         Mapper接口开发需要遵循以下规范:
         1、Mapper.xml文件中的namespace 与mapper接口的全限定名相同
         2、Mapper接口方法名和Mapper.xml中定 义的每个statement的id相同
         3、Mapper接口方法的输入参 数类型和mapper.xml中定义的每个sql的parameterType的类型相同
         4、Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同
         动态sql
            <!--    动态sql标签-->
                <select id="findByCondition" parameterType="user" resultType="user">
                    select * from user
                    <where>
                        <if test="id!=0">
                            and id=#{id}
                        </if>
                        <if test="username!=null">
                            and username=${username}
                        </if>
                        <if test="password!=null">
                            and password=#{password}
                        </if>
                    </where>
                </select>
            动态sql foreach 循环执行sql的拼接操作 例如 select * from user where id in (1,2,5)
                <!--    数组用array-->
                    <select id="findByIds" resultType="user" parameterType="list"> //集合
                        select * from user
                        <where>
                            <foreach collection="list" open="id in(" close=")" item="id" separator=",">
                                #{id}
                            </foreach>
                        </where>
                    </select>
            sql片段的抽取
            <!--    sql语句的抽取-->
                <sql id="selectUser">select * from user</sql>
            引用
            <include refid="selectUser"/>
         plugins标签
          MyBatis可以使用第三方的插件来对功能进行扩展,分页助手PageHelper是将分页的复杂操作进行封装,使用简单的方式即
          可获得分页的相关数据
          开发步骤:
          ①导入通用PageHelper的坐标
          ②在mybatis核心配置文件中配置PageHelper插件
          ③测试分页数据获取
              mybatis的多表查询:
    一对一
       <resultMap id="orderMap" type="order">
    <!--        手动指定字段与实体属性的映射关系
       column 数据表字段名称
       properties 实体属性名称
       -->
    <!--        主键-->
            <id column="oid" property="id"/>
    <!--        其他非主键-->
            <result column="ordertime" property="ordertime"/>
            <result column="total" property="total"/>
    <!--        User-->
    <!--        <result column="uid" property="user.id"/>
            <result column="username" property="user.username"/>
            <result column="password" property="user.password"/>
            <result column="birthday" property="user.birthday"/>-->
            <!--匹配 property 属性名称 javaType 是属性类型-->
            <association property="user" javaType="user">
                <id column="uid" property="id"/>
                <result column="username" property="username"/>
                <result column="password" property="password"/>
                <result column="birthday" property="birthday"/>
            </association>
        </resultMap>
        <select id="findAll" resultMap="orderMap">

            select *,o.id oid from  orders o, user u where o.uid = u.id
        </select>
        一对多或多对多
            <resultMap id="userAndRoleMap" type="user">
                <id column="userId" property="id"/>
                <result column="username" property="username"/>
                <result column="password" property="password"/>
                <result column="birthday" property="birthday"/>
                <collection property="roleList" ofType="role">
                    <!--            封装Order的数据-->
                    <id column="roleId" property="id"/>
                    <result column="roleName" property="roleName"/>
                    <result column="roleDesc" property="roleDesc"/>
                </collection>
            </resultMap>
            <select id="findUserAndRole" resultMap="userAndRoleMap">
                select * FROM user u,sys_user_role ur,sys_role r where u.id = ur.userId and ur.roleId =r.id
            </select>
        MyBatis的常用注解
        这几年来注解开发越来越流行，Mybatist也可以使用注解开发方式，这样我们就可以减少编写Mapper
        映射文件了。我们先围绕-些基本的CRUD来学习， 再学习复杂映射多表操作。
        @Insert:实现新增
        @Update:实现更新
        @Delete:实现删除
        @Select:实现查询
        @Result:实现结果集封装
        @Results:可以与@Result-起使用， 封装多个结果集
        @One:实现-对一结果集封装
        @Many:实现- -对多结果集封装
