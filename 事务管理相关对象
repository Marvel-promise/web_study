编程式事务控制相关对象
PlatformTransactionManager接口是spring的事务管理器，它里面提供了操作事务的方法 不同的dao层技术则有不同的实现技术
TransactionStatus getTransaction(TransactionDefinition definition)获取事物的状态信息
void commit(TransactionStatus status)提交事务
void rollback(TransactionStatus status)回滚事务

TransactionDefinition 是事务的定义信息对象
int getIsolationLevel() 获得事务的隔离级别
int getProrogationBehavior() 获得事物的传播行为
int getTimeout() 获得超时时间
boolean isReadOnly() 是否只读

TransactionStatus 提供是事务的具体运行状态
boolean hasSavepoint() 是否存储回滚点
boolean isCompleted() 事务是否完成
boolean isNewTransaction() 是否是新的事务
boolean isRollbackOnly() 事务是否回滚
声明式事务控制：
spring的声明式事务控制采用声明的方式来处理事务，在配置文件中声明 事务管理不侵入开发的组件 在不需要事务管理时，只要在设定文件修改
底层就是aop
<!--    目标对象内部方法为切点-->
    <bean id="accountService" class="com.Wang.service.Impl.AccountServiceImpl">
        <property name="dao" ref="accountDao"/>
    </bean>
<!--    配置一个平台事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>
<!--   通知，事务的增强 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
<!--            设置事务的属性信息-->
            <tx:method name="*"/> <!-- 那些方法被控制-->
        </tx:attributes>
    </tx:advice>
<!--    配置事务的aop织入-->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.Wang.service.*.*(..))"/>
    </aop:config>
注解方式：
@Service("accountService")
@ComponentScan
@Transactional//当前对象所有均用事务控制
public class AccountServiceImpl implements AccountService {
    @Autowired
    private AccountDao dao;
    @Override
    //@Transactional(/*isolation = Isolation.DEFAULT,propagation = Propagation.MANDATORY*/)
    public void transfer(String outMan, String inMan, double money) {
        //开事务
        dao.out(outMan, money);
        int i= 1/0;
        dao.in(inMan,money);
        //提交事务

    }
}
    <!--事务的注解驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"/>